Введение
============

Добро пожаловать в Python 101! Я писал эту книгу, чтобы помочь вам изучить
Python 3. Она не претендует на звание исчерпывающего справочного руководства.
Вместо этого, объектом книги является ознакомить вас со строительными блоками
Python настолько, чтобы вы могли написать что-то полезное для себя. Множество
книг по программированию учат вас только языку, но не идут гораздо дальше. Я
постараюсь не только помочь вам с основами, но также и показать, как создавать
полезные программы. Сейчас вы можете быть удивлены, почему простого изучения
основ не достаточно. По моему личному опыту, когда я заканчиваю читать введение,
то хочу написать затем что-то, но я не знаю как! Я прошёл обучение, но не в
состоянии пройти из пункта А в пункт Б. Думаю, важно не только обучить вас
основам, но также коснуться и более продвинутого материала.

Таким образом, эта книгу будет разделена на пять частей

> -   Первая часть коснётся основ Python
> -   Вторая часть будет посвящена небольшой части стандартного библиотеки Python
> -   Третья часть будет включать материал среднего уровня сложности
> -   Четвёртая часть будет состоять из последовательности небольших руководств
> -   Пятая часть коснётся создания Python-пакетов и их распространения

|

Дайте мне потратить немного времени на объяснения, что каждая из частей из себя
представляет. В первой части мы коснёмся следующего:

> -   Python-типы (строки, списки, словари и т.д.)
> -   Условные операторы
> -   Циклы
> -   Списковые и словарные включения
> -   Обработка исключений
> -   Файловый ввод-вывод
> -   Функции и классы

|

Во второй части рассказывается о некоторых пакетах из стандартной
библиотеки Python. Стандартная библиотека - это готовые модули, которые
можно импортировать для получения дополнительной функциональности. Например,
вы можете импортировать модуль **math** для получения некоторых высокоуровневых
математических функций. Я буду брать модули, которые использую в повседневной
работе, и рассказывать, как они работают. Это хорошая идея, на мой взгляд,
потому, что эти модули являются общими, используются каждый день, поэтому
вам будет полезно о них узнать в начале вашего обучения Python. Этот раздел
также охватывает различные способы установки сторонних модулей. В итоге я
расскажу, как создавать собственные модули и пакеты, и почему я хотел бы
сделать это в первую очередь. Ниже представлены некоторые модули, которые
мы рассмотрим:

> -   csv
> -   ConfigParser
> -   logging
> -   os
> -   smtplib / email
> -   subprocess
> -   sys
> -   thread / queues
> -   time / datetime

|

Третья часть затронет различные темы среднего уровня сложности. Существуют
темы, которые хорошо бы знать, но необязательны, чтобы написать программу
на Python. Они включают:

> -   Python-отладчик (pdb)
> -   декораторы
> -   лямбда-функции
> -   профилирование кода
> -   введение в тестирование

|

Четвёртая часть будет представлена в виде небольших руководств, которые
помогут вам научиться использовать Python на практике. В этом разделе вы
изучите, как создавать Python-программы, которые делают что-то полезное.
Из этих материалов вы узнаете, как создавать собственные скрипты. Идеи по
дальнейшему улучшению этих мини-приложений будут представлены в конце
каждого руководства, так что у вас будет возможность сделать что-то
собственноручно. Ниже представлены несколько сторонних пакетов, которые
мы затронем:

> -   pip and easy\_install
> -   configobj
> -   lxml
> -   requests
> -   virtualenv
> -   pylint / pychecker
> -   SQLAlchemy

|

В пятой части рассказывается, как поделиться вашим кодом с семьёй,
друзьями и миром! Вы изучите следующее:

> -   Как поместить ваши переиспользуемые скрипты в Python "eggs", " wheels" и т.д.
> -   Как загрузить ваше творение в Python Package Index (PyPI)
> -   Как создать бинарные исполняемые файлы для запуска вашего приложения без Python
> -   Как создать инсталлятор для вашего приложения

|

Главы и разделы могут быть разными по длине. Чтобы каждая тема была
хорошо раскрыта, может понадобиться не одно и то же количество страниц.

Краткая история Python
-------------------------

Я думаю, это поможет узнать предпосылки для языка программирования Python.
Python был создан в конце [80-х](http://www.artima.com/intv/pythonP.html).
Каждый согласится, что его создателем является Гвидо Ван Россум, написавший
его как преемника языка программирования ABC, который он в тот момент
использовал. Гвидо назвал язык в честь одного из своих любимых шоу: Monty
Python. Язык не был представлен до 1991 года и он значительно вырос с точки
зрения количества включенных модулей и пакетов. В момент написания этой книги
существует 2 основные версии Python: ветка 2.x и 3.x (иногда известна как
Python 3000).  3.x не имеет обратной совместимости с 2.x, потому что в момент
создания 3.x идея заключалась в избавлении от некоторых особенностей
предыдущей версии. Текущие версии - 2.7.12 и 3.5.2. Большинство функций 3.x
добавлены в 2.x, однако основная часть разработки ведётся для ветки 3.x,
соответственно это версия будущего Python.

Некоторые люди полагают, что Python используется исключительно для
связывания "реального" кода, написанного, к примеру, на C++ или Haskell.
Однако вы обнаружите, что Python полезен в практически любой ситуации.
Python активно используется такими крупными компаниями, как  Google, NASA,
LinkedIn, Industrial Light & Magic и многими другими. Python используется
не только на бэкенде, но также и на фронтенде. Если вы - новичок в сфере
компьютерных наук, бэкенд - это то, что происходит за сценой: например,
работа с базой данных, генерация документов и т.д. Работа с фронтендом
знакома большинству пользователей, т.к. сюда относятся веб-страницы или
настольный пользовательский интерфейс. Например, существуют действительно
хорошие наборы инструментов для создания GUI на Python:  wxPython, PySide
и Kivy. Существует также несколько веб-фреймворков вроде Django, Pyramid
и Flask. Для вас может быть сюрпризом, но Django используется для Instagram
и Pinterest. Если вы используете эти или многие другие сайты, тогда вы
используете что-то, что написано на Python!

Об авторе
----------------

Вы можете быть удивлены относительно того, кто я такой и почему я могу
быть осведомлённым о Python настолько, чтобы писать о нём, поэтому, я думаю,
дам вам немного информации о себе. Я начал программировать на Python осенью
2006 года на работе. Моей первой задачей было портировать скрипты для
авторизации с Kixtart на Python на Windows. Моим вторым проектом было
портирование VBA-кода (по существу GUI на основе продуктов Microsoft Office)
на Python, с которого началось моё знакомство с wxPython. С тех пор я
постоянно использую Python, занимаясь программированием бекенда и настольных
пользовательских интерфейсов.

Я осознал, что единственным способом для меня запомнить, как выполнять
основные задачи на Python, было написать о них, так появился мой
Python-блог: <http://www.blog.pythonlibrary.org/>. Я писал, что получал
отзывы от моих читателей и позднее расширил блог, добавив подсказки,
руководства, новости мира Python и отзывы на книги, связанные с этим
языком программирования. Я постоянно работаю с Packt Publishing в качестве
технического рецензента, т.е. пытаюсь отыскать ошибки в книгах до того, как
они будут опубликованы. Я также создал веб-сайты Developer Zone (DZone) и
i-programmer, а также Python Software Foundation. В ноябре 2013 DZone
опубликовал документ **The Essential Core Python Cheat Sheet**, соавтором
которого я являюсь.

Соглашения
-----------

Как и в большинстве технических книг, эта содержит несколько соглашений,
о которых вам следует знать. Новые темы и терминология будут выделены
**жирным**. Вы также увидите некоторые примеры, которые выглядят
следующим образом:

``` {.sourceCode .python}
>>> myString = "Доброе пожаловать в Python!"
```

**&gt;&gt;&gt;** - это символ ввода Python-консоли. Вы увидите его в **IDLE**
и при включении **интерпретатора**. Вы изучите больше о каждом из этих случаев
в первой главе. Другие примеры кода будут показаны подобным образом, но без
**&gt;&gt;&gt;**.

Требования
------------

Вам понадобится установленный Python 3. Примеры должны работать и в ветке 2.х,
и в 3.х, если специально не указано обратное. Большинство машин на Linux или
Mac уже имеют предустановленный Python, однако, если вы все-таки не обнаружите
его у себя, можно скачать копию с [<http://python.org/download/>](http://python.org/download/).
На сайте есть новейшие инструкции по установке, так что я не буду включать
любые подобные руководства в эту книгу. Любые дополнительные требования будут объяснены
по ходу чтения книги.

Обратная связь с читателями
---------------

Я приветствую любую обратную связь о моих работах. Если вы хотите дать мне
знать, что вы думаете об этой книге, то можете отправить комментарии по
следующему адресу:

<comments@pythonlibrary.org>

Исправление опечаток
------

Я стараюсь не допускать опечаток в своих работах, однако они случаются время
от времени. Если вы заметите опечатку в этой книге, дайте мне знать об этом в
своё свободное время, написав по следующему адресу электронной почты:

<errata@pythonlibrary.org>
